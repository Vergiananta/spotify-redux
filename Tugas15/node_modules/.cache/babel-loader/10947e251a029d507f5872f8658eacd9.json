{"ast":null,"code":"var _jsxFileName = \"/home/vergi/Documents/materi pascal/Week_11/Latihan fetching/empty_project2/src/component/genres/component/ListGenre.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { Table, Card, CardHeader, Spinner, Button } from \"reactstrap\";\nimport { FETCH_COMPLETE, SET_LOADING, EDIT_BUTTON } from \"../reducers/Actions\";\nimport * as Service from \"../services/GenreService\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport Modal from \"reactstrap/lib/Modal\";\nimport ModalHeader from \"reactstrap/lib/ModalHeader\";\nimport ModalBody from \"reactstrap/lib/ModalBody\";\nimport ModalFooter from \"reactstrap/lib/ModalFooter\";\n\nclass ListGenre extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleEdit = genreId => {\n      const {\n        handleEditButton,\n        history\n      } = this.props;\n      handleEditButton(genreId);\n      history.replace(\"/genres/form\");\n    };\n\n    this.handleDelete = () => {\n      // const { setLoading } = this.props;\n      const {\n        target\n      } = this.state;\n      this.setState({\n        dialogOpen: false\n      });\n      Service.deleteGenre(target).then(isSuccess => {\n        if (isSuccess) this.loadData();\n      });\n    };\n\n    this.confirmDelete = target => {\n      this.setState({\n        target,\n        dialogOpen: true,\n        dialogText: `Are you sure you want to delete ${target.name}?`\n      });\n    };\n\n    this.state = {\n      target: undefined,\n      dialogOpen: false,\n      dialogText: ''\n    };\n  }\n\n  loadData() {\n    const {\n      fetchData,\n      fetchComplete\n    } = this.props;\n    fetchData();\n    Service.getGenres().then(genres => {\n      fetchComplete(genres);\n    });\n  }\n\n  componentDidMount() {\n    const {\n      fetchData,\n      fetchComplete\n    } = this.props;\n    fetchData();\n    Service.getGenres().then(genres => {\n      fetchComplete(genres);\n    });\n  }\n\n  generateTableRows() {\n    const {\n      genres\n    } = this.props;\n    let rows = /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      colSpan: \"2\",\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 24\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Spinner, {\n      type: \"grow\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 65\n      }\n    })));\n\n    if (!this.props.isLoading) {\n      rows = genres.map((genre, index) => {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }\n        }, index + 1), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }\n        }, genre.name), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          type: \"button\",\n          color: \"warning\",\n          size: \"sm\",\n          className: \"shadow\",\n          onClick: () => this.handleEdit(genre.id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }\n        }, \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n          type: \"button\",\n          color: \"danger\",\n          onClick: () => this.confirmDelete(genre),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }\n        }, \" Delete \")));\n      });\n    }\n\n    return rows;\n  }\n\n  render() {\n    const {\n      dialogOpen,\n      dialogText\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      tag: \"strong\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }, \"Genres\", /*#__PURE__*/React.createElement(Link, {\n      to: \"/genre/form\",\n      className: \"float-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      color: \"light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 29\n      }\n    }, \" New Genre \"))), /*#__PURE__*/React.createElement(Table, {\n      responsive: true,\n      striped: true,\n      hover: true,\n      className: \"m-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      width: \"5%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 33\n      }\n    }, \"#\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 33\n      }\n    }, \"Genre\"), /*#__PURE__*/React.createElement(\"th\", {\n      colSpan: \"3\",\n      width: \"20%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 33\n      }\n    }, \"Action\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    }, this.generateTableRows())), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: dialogOpen,\n      size: \"sm\",\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: dialogOpen,\n      tag: \"strong\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 25\n      }\n    }, \"Delete Confirmation\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 25\n      }\n    }, dialogText), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      color: \"danger\",\n      onClick: this.handleDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 29\n      }\n    }, \"Confirm\"), /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      color: \"secondary\",\n      onClick: () => this.setState({\n        target: undefined,\n        dialogText: '',\n        dialogOpen: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 29\n      }\n    }, \"Cancel\")))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return { ...state\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchData: () => dispatch({\n      type: SET_LOADING\n    }),\n    fetchComplete: payload => dispatch({\n      type: FETCH_COMPLETE,\n      payload\n    }),\n    handleEditButton: payload => dispatch({\n      type: EDIT_BUTTON,\n      payload\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ListGenre));","map":{"version":3,"sources":["/home/vergi/Documents/materi pascal/Week_11/Latihan fetching/empty_project2/src/component/genres/component/ListGenre.js"],"names":["React","Component","Fragment","Table","Card","CardHeader","Spinner","Button","FETCH_COMPLETE","SET_LOADING","EDIT_BUTTON","Service","connect","Link","withRouter","Modal","ModalHeader","ModalBody","ModalFooter","ListGenre","constructor","props","handleEdit","genreId","handleEditButton","history","replace","handleDelete","target","state","setState","dialogOpen","deleteGenre","then","isSuccess","loadData","confirmDelete","dialogText","name","undefined","fetchData","fetchComplete","getGenres","genres","componentDidMount","generateTableRows","rows","isLoading","map","genre","index","id","render","mapStateToProps","mapDispatchToProps","dispatch","type","payload"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { Table, Card, CardHeader, Spinner, Button } from \"reactstrap\";\nimport { FETCH_COMPLETE, SET_LOADING, EDIT_BUTTON } from \"../reducers/Actions\";\nimport * as Service from \"../services/GenreService\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nimport Modal from \"reactstrap/lib/Modal\";\nimport ModalHeader from \"reactstrap/lib/ModalHeader\";\nimport ModalBody from \"reactstrap/lib/ModalBody\";\nimport ModalFooter from \"reactstrap/lib/ModalFooter\";\n\nclass ListGenre extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            target: undefined,\n            dialogOpen: false,\n            dialogText: '',\n        };\n    }\n\n    loadData() {\n        const { fetchData, fetchComplete } = this.props;\n\n        fetchData();\n\n        Service.getGenres().then((genres) => {\n            fetchComplete(genres);\n        });\n    }\n\n    handleEdit = (genreId) => {\n        const { handleEditButton, history } = this.props;\n        handleEditButton(genreId);\n        history.replace(\"/genres/form\")\n    }\n\n    handleDelete = () => {\n        // const { setLoading } = this.props;\n        const { target } = this.state;\n        this.setState({ dialogOpen: false });\n        Service.deleteGenre(target)\n            .then((isSuccess) => {\n                if (isSuccess) this.loadData();\n            });\n    }\n\n    confirmDelete = (target) => {\n        this.setState({\n            target, dialogOpen: true,\n            dialogText: `Are you sure you want to delete ${target.name}?`\n        });\n    }\n\n\n    componentDidMount() {\n        const { fetchData, fetchComplete } = this.props;\n\n        fetchData();\n\n        Service.getGenres().then((genres) => {\n            fetchComplete(genres);\n        });\n\n    }\n\n    generateTableRows() {\n        const { genres } = this.props;\n        let rows = <tr><td colSpan=\"2\" className=\"text-center\"> <Spinner type=\"grow\" color=\"primary\" /></td></tr>\n\n        if (!this.props.isLoading) {\n            rows = genres.map((genre, index) => {\n                return (\n                    <tr key={index}>\n                        <td>{index + 1}</td>\n                        <td>{genre.name}</td>\n                        <td>\n                            <Button type=\"button\"\n                                color=\"warning\" size=\"sm\"\n                                className=\"shadow\"\n                                onClick={() => this.handleEdit(genre.id)}>\n                                Edit\n                            </Button>\n                            <Button type=\"button\" color=\"danger\" onClick={() => this.confirmDelete(genre)}> Delete </Button>\n                            {/* <Button type=\"button\"\n                                color=\"danger\" size=\"sm\"\n                                className=\"shadow\" onClick={() => this.handleDelete(genre.id)}>\n                                Delete\n                                </Button> */}\n                        </td>\n\n                    </tr>\n                )\n            });\n\n        }\n\n        return rows;\n\n    }\n\n    render() {\n        const { dialogOpen, dialogText } = this.state;\n        return (\n            <Fragment>\n                <Card className=\"shadow\">\n                    <CardHeader tag='strong'>Genres\n                        <Link to='/genre/form' className=\"float-right\">\n                            <Button type=\"button\" color=\"light\"> New Genre </Button>\n                        </Link>\n                    </CardHeader>\n                    <Table responsive striped hover className='m-0'>\n                        <thead>\n                            <tr>\n                                <th width=\"5%\">#</th>\n                                <th>Genre</th>\n                                <th colSpan=\"3\" width=\"20%\">Action</th>\n                            </tr>\n                        </thead>\n                        <tbody>{this.generateTableRows()}</tbody>\n                    </Table>\n                    <Modal isOpen={dialogOpen} size=\"sm\" centered={true}>\n                        <ModalHeader toggle={dialogOpen} tag='strong'>Delete Confirmation</ModalHeader>\n                        <ModalBody>{dialogText}</ModalBody>\n                        <ModalFooter>\n                            <Button type=\"button\" color=\"danger\" onClick={this.handleDelete}>Confirm</Button>\n                            <Button type=\"button\" color=\"secondary\" onClick={() => this.setState({ target: undefined, dialogText: '', dialogOpen: false })}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                </Card>\n            </Fragment>\n        )\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return { ...state };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchData: () => dispatch({ type: SET_LOADING }),\n        fetchComplete: (payload) => dispatch({ type: FETCH_COMPLETE, payload }),\n        handleEditButton: (payload) => dispatch({ type: EDIT_BUTTON, payload }),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ListGenre));"]},"metadata":{},"sourceType":"module"}