{"ast":null,"code":"var _jsxFileName = \"/home/vergi/Documents/materi pascal/Week_11/Latihan fetching/empty_project2/src/component/genres/component/ListGenre.js\";\nimport React, { Component, useState } from \"react\";\nimport { Table, Card, CardHeader, Spinner, Button } from \"reactstrap\";\nimport { FETCH_COMPLETE, DELETE_GENRE, SET_LOADING, EDIT_BUTTON } from \"../reducers/Actions\";\nimport * as Service from \"../services/GenreService\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport ModalFooter from \"reactstrap/lib/ModalFooter\";\nimport ModalBody from \"reactstrap/lib/ModalBody\";\nimport ModalHeader from \"reactstrap/lib/ModalHeader\";\nimport Modal from \"reactstrap/lib/Modal\";\n\nclass ListGenre extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleEdit = genreId => {\n      const {\n        handleEditButton,\n        history\n      } = this.props;\n      handleEditButton(genreId);\n      history.replace(\"/genres/form\");\n    };\n\n    this.handleDelete = genreId => {\n      Service.deleteGenre(genreId).then(isSuccess => {\n        if (isSuccess) this.loadData();\n      });\n    };\n  }\n\n  loadData() {\n    const {\n      fetchData,\n      fetchComplete\n    } = this.props;\n    console.log(this.props.location.query);\n    fetchData();\n    Service.getGenres().then(genres => {\n      fetchComplete(genres);\n    });\n  }\n\n  componentDidMount() {\n    const {\n      fetchData,\n      fetchComplete\n    } = this.props;\n    fetchData();\n    Service.getGenres().then(genres => {\n      fetchComplete(genres);\n    });\n  }\n\n  generateTableRows() {\n    const {\n      genres\n    } = this.props;\n\n    const ModalExample = props => {\n      const [modal, setModal] = useState(false);\n\n      const toggle = () => setModal(!modal);\n\n      const externalCloseBtn = /*#__PURE__*/React.createElement(\"button\", {\n        className: \"close\",\n        style: {\n          position: 'absolute',\n          top: '15px',\n          right: '15px'\n        },\n        onClick: toggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 38\n        }\n      }, \"\\xD7\");\n      let rows = /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 24\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        colSpan: \"2\",\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 28\n        }\n      }, \" \", /*#__PURE__*/React.createElement(Spinner, {\n        type: \"grow\",\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 69\n        }\n      })));\n\n      if (!this.props.isLoading) {\n        rows = genres.map((genre, index) => {\n          return /*#__PURE__*/React.createElement(\"tr\", {\n            key: index,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }\n          }, index + 1), /*#__PURE__*/React.createElement(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }\n          }, genre.name), /*#__PURE__*/React.createElement(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            type: \"button\",\n            color: \"warning\",\n            size: \"sm\",\n            className: \"shadow\",\n            onClick: () => this.handleEdit(genre.id),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 33\n            }\n          }, \"Edit\"), /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 33\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            color: \"danger\",\n            onClick: this.toggle,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 37\n            }\n          }, \"Delete\"), /*#__PURE__*/React.createElement(Modal, {\n            isOpen: modal,\n            toggle: this.toggle,\n            className: \"shadow\",\n            external: this.externalCloseBtn,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 37\n            }\n          }, /*#__PURE__*/React.createElement(ModalHeader, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 41\n            }\n          }, \"Modal title\"), /*#__PURE__*/React.createElement(ModalBody, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 41\n            }\n          }, /*#__PURE__*/React.createElement(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 45\n            }\n          }, \"Are you sure to delete this genre?\"), /*#__PURE__*/React.createElement(\"br\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 86\n            }\n          })), /*#__PURE__*/React.createElement(ModalFooter, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 41\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            color: \"primary\",\n            onClick: () => this.handleDelete(genre.id),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 45\n            }\n          }, \"Yes\"), ' ', /*#__PURE__*/React.createElement(Button, {\n            color: \"secondary\",\n            onClick: this.toggle,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 45\n            }\n          }, \"Cancel\"))))));\n        });\n      }\n\n      return rows;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Card, {\n      className: \"shadow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      tag: \"strong\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, \"Genres\", /*#__PURE__*/React.createElement(Link, {\n      to: \"/genres/form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"float-right\",\n      size: \"sm\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 41\n      }\n    }, \" New Genre\")), \">\"), /*#__PURE__*/React.createElement(Table, {\n      responsive: true,\n      striped: true,\n      hover: true,\n      className: \"m-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 29\n      }\n    }, \"#\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 29\n      }\n    }, \"Name\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, this.generateTableRows())));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return { ...state\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchData: () => dispatch({\n      type: SET_LOADING\n    }),\n    fetchComplete: payload => dispatch({\n      type: FETCH_COMPLETE,\n      payload\n    }),\n    handleEditButton: payload => dispatch({\n      type: EDIT_BUTTON,\n      payload\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ListGenre));","map":{"version":3,"sources":["/home/vergi/Documents/materi pascal/Week_11/Latihan fetching/empty_project2/src/component/genres/component/ListGenre.js"],"names":["React","Component","useState","Table","Card","CardHeader","Spinner","Button","FETCH_COMPLETE","DELETE_GENRE","SET_LOADING","EDIT_BUTTON","Service","connect","Link","withRouter","ModalFooter","ModalBody","ModalHeader","Modal","ListGenre","handleEdit","genreId","handleEditButton","history","props","replace","handleDelete","deleteGenre","then","isSuccess","loadData","fetchData","fetchComplete","console","log","location","query","getGenres","genres","componentDidMount","generateTableRows","ModalExample","modal","setModal","toggle","externalCloseBtn","position","top","right","rows","isLoading","map","genre","index","name","id","render","mapStateToProps","state","mapDispatchToProps","dispatch","type","payload"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport { Table, Card, CardHeader, Spinner, Button } from \"reactstrap\";\nimport { FETCH_COMPLETE, DELETE_GENRE, SET_LOADING, EDIT_BUTTON } from \"../reducers/Actions\";\nimport * as Service from \"../services/GenreService\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport ModalFooter from \"reactstrap/lib/ModalFooter\";\nimport ModalBody from \"reactstrap/lib/ModalBody\";\nimport ModalHeader from \"reactstrap/lib/ModalHeader\";\nimport Modal from \"reactstrap/lib/Modal\";\n\n\nclass ListGenre extends Component {\n\n    loadData() {\n        const { fetchData, fetchComplete } = this.props;\n        console.log(this.props.location.query);\n\n        fetchData();\n\n        Service.getGenres().then((genres) => {\n            fetchComplete(genres);\n        });\n\n    }\n\n    handleEdit = (genreId) => {\n        const { handleEditButton, history } = this.props;\n        handleEditButton(genreId);\n        history.replace(\"/genres/form\")\n    }\n\n    handleDelete = (genreId) => {\n        Service.deleteGenre(genreId).then((isSuccess) => {\n            if (isSuccess) this.loadData();\n        })\n\n    }\n\n\n    componentDidMount() {\n        const { fetchData, fetchComplete } = this.props;\n\n        fetchData();\n\n        Service.getGenres().then((genres) => {\n            fetchComplete(genres);\n        });\n\n    }\n\n    generateTableRows() {\n        const { genres } = this.props;\n        const ModalExample = (props) => {\n            const [modal, setModal] = useState(false);\n            const toggle = () => setModal(!modal);\n            const externalCloseBtn = <button className=\"close\" style={{ position: 'absolute', top: '15px', right: '15px' }} onClick={toggle}>&times;</button>;\n\n            let rows = <tr><td colSpan=\"2\" className=\"text-center\"> <Spinner type=\"grow\" color=\"primary\" /></td></tr>\n\n            if (!this.props.isLoading) {\n                rows = genres.map((genre, index) => {\n                    return (\n                        <tr key={index}>\n                            <td>{index + 1}</td>\n                            <td>{genre.name}</td>\n                            <td>\n                                <Button type=\"button\"\n                                    color=\"warning\" size=\"sm\"\n                                    className=\"shadow\"\n                                    onClick={() => this.handleEdit(genre.id)}>\n                                    Edit\n                            </Button>\n                                <div>\n                                    <Button color=\"danger\" onClick={this.toggle}>Delete</Button>\n                                    <Modal isOpen={modal} toggle={this.toggle} className=\"shadow\" external={this.externalCloseBtn}>\n                                        <ModalHeader>Modal title</ModalHeader>\n                                        <ModalBody>\n                                            <b>Are you sure to delete this genre?</b><br />\n                                        </ModalBody>\n                                        <ModalFooter>\n                                            <Button color=\"primary\" onClick={() => this.handleDelete(genre.id)}>Yes</Button>{' '}\n                                            <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n                                        </ModalFooter>\n                                    </Modal>\n                                </div>\n                                {/* <Button type=\"button\"\n                                color=\"danger\" size=\"sm\"\n                                className=\"shadow\" onClick={() => this.handleDelete(genre.id)}>\n                                Delete\n                                </Button> */}\n                            </td>\n\n                        </tr>\n                    )\n                });\n\n            }\n\n            return rows;\n        }\n    }\n\n    render() {\n        return (\n            <Card className=\"shadow\">\n                <CardHeader tag=\"strong\">Genres\n                <Link to=\"/genres/form\"><Button className=\"float-right\" size=\"sm\" color=\"primary\"> New Genre</Button></Link>>\n                </CardHeader>\n\n                <Table responsive striped hover className=\"m-0\">\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.generateTableRows()}\n                    </tbody>\n                </Table>\n            </Card>\n        );\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return { ...state };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchData: () => dispatch({ type: SET_LOADING }),\n        fetchComplete: (payload) => dispatch({ type: FETCH_COMPLETE, payload }),\n        handleEditButton: (payload) => dispatch({ type: EDIT_BUTTON, payload }),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ListGenre));"]},"metadata":{},"sourceType":"module"}